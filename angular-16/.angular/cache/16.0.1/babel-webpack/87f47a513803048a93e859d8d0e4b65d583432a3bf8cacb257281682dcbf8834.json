{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/predict-land/predict-land.component.ts\nimport { Component } from '@angular/core';\nlet PredictLandComponent = class PredictLandComponent {\n  constructor(predictionService, currencyService) {\n    this.predictionService = predictionService;\n    this.currencyService = currencyService;\n    this.predictedUSD = null;\n    this.predictedTND = null;\n    this.predicting = false;\n    this.loadingRate = false;\n    this.inputDim = 25;\n  }\n  onSubmit(form) {\n    if (form.invalid) return;\n    // build your feature vector\n    const zeros = Array(this.inputDim - 3).fill(0);\n    const features = [this.year, this.stateEncoded, this.landUseEncoded, ...zeros];\n    this.predicting = true;\n    this.predictedUSD = null;\n    this.predictedTND = null;\n    // 1) call prediction\n    this.predictionService.predict(features).subscribe({\n      next: ({\n        predicted_price\n      }) => {\n        this.predictedUSD = predicted_price;\n        // 2) fetch conversion rate\n        this.loadingRate = true;\n        this.currencyService.getUsdToTndRate().subscribe({\n          next: rate => {\n            this.predictedTND = this.predictedUSD * rate;\n            this.loadingRate = false;\n            this.predicting = false;\n          },\n          error: err => {\n            console.error('Rate fetch error', err);\n            this.loadingRate = false;\n            this.predicting = false;\n          }\n        });\n      },\n      error: err => {\n        console.error('Prediction error', err);\n        this.predicting = false;\n      }\n    });\n  }\n};\nPredictLandComponent = __decorate([Component({\n  selector: 'app-predict-land',\n  templateUrl: './predict-land.component.html',\n  styleUrls: ['./predict-land.component.scss']\n})], PredictLandComponent);\nexport { PredictLandComponent };","map":{"version":3,"names":["Component","PredictLandComponent","constructor","predictionService","currencyService","predictedUSD","predictedTND","predicting","loadingRate","inputDim","onSubmit","form","invalid","zeros","Array","fill","features","year","stateEncoded","landUseEncoded","predict","subscribe","next","predicted_price","getUsdToTndRate","rate","error","err","console","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\pages\\predict-land\\predict-land.component.ts"],"sourcesContent":["// src/app/predict-land/predict-land.component.ts\nimport { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { PredictionService } from '../Services/prediction.service';\nimport { CurrencyService }   from '../services/currency.service';\n\n@Component({\n  selector: 'app-predict-land',\n  templateUrl: './predict-land.component.html',\n  styleUrls: ['./predict-land.component.scss']\n})\nexport class PredictLandComponent {\n  year!: number;\n  stateEncoded!: number;\n  landUseEncoded!: number;\n\n  predictedUSD: number | null = null;\n  predictedTND: number | null = null;\n  predicting = false;\n  loadingRate = false;\n\n  private inputDim = 25;\n\n  constructor(\n    private predictionService: PredictionService,\n    private currencyService: CurrencyService\n  ) {}\n\n  onSubmit(form: NgForm) {\n    if (form.invalid) return;\n\n    // build your feature vector\n    const zeros = Array(this.inputDim - 3).fill(0);\n    const features = [\n      this.year,\n      this.stateEncoded,\n      this.landUseEncoded,\n      ...zeros\n    ];\n\n    this.predicting = true;\n    this.predictedUSD = null;\n    this.predictedTND = null;\n\n    // 1) call prediction\n    this.predictionService.predict(features).subscribe({\n      next: ({ predicted_price }: PredictionResponse) => {\n        this.predictedUSD = predicted_price;\n        // 2) fetch conversion rate\n        this.loadingRate = true;\n        this.currencyService.getUsdToTndRate().subscribe({\n          next: rate => {\n            this.predictedTND = this.predictedUSD! * rate;\n            this.loadingRate = false;\n            this.predicting = false;\n          },\n          error: err => {\n            console.error('Rate fetch error', err);\n            this.loadingRate = false;\n            this.predicting = false;\n          }\n        });\n      },\n      error: err => {\n        console.error('Prediction error', err);\n        this.predicting = false;\n      }\n    });\n  }\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,eAAe;AAUzC,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAoB;EAY/BC,YACUC,iBAAoC,EACpCC,eAAgC;IADhC,KAAAD,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,eAAe,GAAfA,eAAe;IATzB,KAAAC,YAAY,GAAkB,IAAI;IAClC,KAAAC,YAAY,GAAkB,IAAI;IAClC,KAAAC,UAAU,GAAG,KAAK;IAClB,KAAAC,WAAW,GAAG,KAAK;IAEX,KAAAC,QAAQ,GAAG,EAAE;EAKlB;EAEHC,QAAQA,CAACC,IAAY;IACnB,IAAIA,IAAI,CAACC,OAAO,EAAE;IAElB;IACA,MAAMC,KAAK,GAAGC,KAAK,CAAC,IAAI,CAACL,QAAQ,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;IAC9C,MAAMC,QAAQ,GAAG,CACf,IAAI,CAACC,IAAI,EACT,IAAI,CAACC,YAAY,EACjB,IAAI,CAACC,cAAc,EACnB,GAAGN,KAAK,CACT;IAED,IAAI,CAACN,UAAU,GAAG,IAAI;IACtB,IAAI,CAACF,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,YAAY,GAAG,IAAI;IAExB;IACA,IAAI,CAACH,iBAAiB,CAACiB,OAAO,CAACJ,QAAQ,CAAC,CAACK,SAAS,CAAC;MACjDC,IAAI,EAAEA,CAAC;QAAEC;MAAe,CAAsB,KAAI;QAChD,IAAI,CAAClB,YAAY,GAAGkB,eAAe;QACnC;QACA,IAAI,CAACf,WAAW,GAAG,IAAI;QACvB,IAAI,CAACJ,eAAe,CAACoB,eAAe,EAAE,CAACH,SAAS,CAAC;UAC/CC,IAAI,EAAEG,IAAI,IAAG;YACX,IAAI,CAACnB,YAAY,GAAG,IAAI,CAACD,YAAa,GAAGoB,IAAI;YAC7C,IAAI,CAACjB,WAAW,GAAG,KAAK;YACxB,IAAI,CAACD,UAAU,GAAG,KAAK;UACzB,CAAC;UACDmB,KAAK,EAAEC,GAAG,IAAG;YACXC,OAAO,CAACF,KAAK,CAAC,kBAAkB,EAAEC,GAAG,CAAC;YACtC,IAAI,CAACnB,WAAW,GAAG,KAAK;YACxB,IAAI,CAACD,UAAU,GAAG,KAAK;UACzB;SACD,CAAC;MACJ,CAAC;MACDmB,KAAK,EAAEC,GAAG,IAAG;QACXC,OAAO,CAACF,KAAK,CAAC,kBAAkB,EAAEC,GAAG,CAAC;QACtC,IAAI,CAACpB,UAAU,GAAG,KAAK;MACzB;KACD,CAAC;EACJ;CACD;AA1DYN,oBAAoB,GAAA4B,UAAA,EALhC7B,SAAS,CAAC;EACT8B,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACW/B,oBAAoB,CA0DhC;SA1DYA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}