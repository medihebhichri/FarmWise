{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/Services/auth.service\";\nimport * as i2 from \"@angular/router\";\nclass LoginComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.username = '';\n    this.password = '';\n    this.errorMessage = '';\n  }\n  onLogin() {\n    const credentials = {\n      username: this.username,\n      password: this.password\n    };\n    this.authService.signin(credentials).subscribe({\n      next: res => {\n        localStorage.setItem('token', res.token);\n        localStorage.setItem('username', res.username);\n        localStorage.setItem('roles', JSON.stringify(res.roles));\n        const roleNames = res.roles;\n        if (roleNames.includes('ROLE_ADMIN')) {\n          this.router.navigate(['/admin']);\n        } else if (roleNames.includes('ROLE_USER')) {\n          this.router.navigate(['/product']);\n        } else {\n          this.router.navigate(['/']);\n        }\n      },\n      error: () => {\n        this.errorMessage = 'Invalid username or password';\n      }\n    });\n  }\n}\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 2,\n  vars: 0,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"login works!\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"(()[_ngcontent-%COMP%]   =[_ngcontent-%COMP%] >  { // webpackBootstrap\\n \\t\\\"use strict\\\";\\n \\t\\n \\t\\n })()[_ngcontent-%COMP%]\\n;\"]\n});\nexport { LoginComponent };","map":{"version":3,"names":["LoginComponent","constructor","authService","router","username","password","errorMessage","onLogin","credentials","signin","subscribe","next","res","localStorage","setItem","token","JSON","stringify","roles","roleNames","includes","navigate","error","i0","ɵɵdirectiveInject","i1","AuthService","i2","Router","selectors","decls","vars","template","LoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\pages\\auth\\login\\login.component.ts","C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\pages\\auth\\login\\login.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/Services/auth.service';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  standalone: false,\n  styleUrls: ['./login.component.css'], \n})\nexport class LoginComponent {\n  username = '';\n  password = '';\n  errorMessage = '';\n\n  constructor(private authService: AuthService, private router: Router) {}\n\n  onLogin(): void {\n    const credentials = { username: this.username, password: this.password };\n  \n    this.authService.signin(credentials).subscribe({\n      next: (res) => {\n        localStorage.setItem('token', res.token);\n        localStorage.setItem('username', res.username);\n        localStorage.setItem('roles', JSON.stringify(res.roles));\n  \n        const roleNames: string[] = res.roles;\n  \n        if (roleNames.includes('ROLE_ADMIN')) {\n          this.router.navigate(['/admin']);\n        } else if (roleNames.includes('ROLE_USER')) {\n          this.router.navigate(['/product']);\n        } else {\n          this.router.navigate(['/']);\n        }\n      },\n      error: () => {\n        this.errorMessage = 'Invalid username or password';\n      }\n    });\n  }\n  \n  \n}\n","<p>login works!</p>\n"],"mappings":";;;AAIA,MAMaA,cAAc;EAKzBC,YAAoBC,WAAwB,EAAUC,MAAc;IAAhD,KAAAD,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAJ5D,KAAAC,QAAQ,GAAG,EAAE;IACb,KAAAC,QAAQ,GAAG,EAAE;IACb,KAAAC,YAAY,GAAG,EAAE;EAEsD;EAEvEC,OAAOA,CAAA;IACL,MAAMC,WAAW,GAAG;MAAEJ,QAAQ,EAAE,IAAI,CAACA,QAAQ;MAAEC,QAAQ,EAAE,IAAI,CAACA;IAAQ,CAAE;IAExE,IAAI,CAACH,WAAW,CAACO,MAAM,CAACD,WAAW,CAAC,CAACE,SAAS,CAAC;MAC7CC,IAAI,EAAGC,GAAG,IAAI;QACZC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,KAAK,CAAC;QACxCF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,GAAG,CAACR,QAAQ,CAAC;QAC9CS,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEE,IAAI,CAACC,SAAS,CAACL,GAAG,CAACM,KAAK,CAAC,CAAC;QAExD,MAAMC,SAAS,GAAaP,GAAG,CAACM,KAAK;QAErC,IAAIC,SAAS,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;UACpC,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;SACjC,MAAM,IAAIF,SAAS,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;UAC1C,IAAI,CAACjB,MAAM,CAACkB,QAAQ,CAAC,CAAC,UAAU,CAAC,CAAC;SACnC,MAAM;UACL,IAAI,CAAClB,MAAM,CAACkB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;MAE/B,CAAC;MACDC,KAAK,EAAEA,CAAA,KAAK;QACV,IAAI,CAAChB,YAAY,GAAG,8BAA8B;MACpD;KACD,CAAC;EACJ;;AA9BWN,cAAc,C;mBAAdA,cAAc,EAAAuB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,WAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAd5B,cAAc,C;QAAdA,cAAc;EAAA6B,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,QAAA,WAAAC,wBAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCV3BX,EAAA,CAAAa,cAAA,QAAG;MAAAb,EAAA,CAAAc,MAAA,mBAAY;MAAAd,EAAA,CAAAe,YAAA,EAAI;;;;;SDUNtC,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}