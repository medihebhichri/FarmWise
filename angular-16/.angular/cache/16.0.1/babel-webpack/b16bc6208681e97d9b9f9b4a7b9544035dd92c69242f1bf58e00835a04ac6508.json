{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/auth.service\";\nclass AuthInterceptor {\n  constructor(authService) {\n    this.authService = authService;\n  }\n  intercept(req, next) {\n    const token = this.authService.getToken();\n    // Exclude requests to the ClassificationService API\n    if (req.url.includes('http://localhost:8000/predict/')) {\n      console.log('Skipping AuthInterceptor for:', req.url);\n      return next.handle(req);\n    }\n    if (token) {\n      console.log('Token:', token); // Debugging log for token\n      const cloned = req.clone({\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\n      });\n      console.log('Outgoing request:', cloned); // Debugging log for request\n      return next.handle(cloned);\n    }\n    console.log('Outgoing request without token:', req); // Debugging log for requests without token\n    return next.handle(req);\n  }\n}\nAuthInterceptor.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || AuthInterceptor)(i0.ɵɵinject(i1.AuthService));\n};\nAuthInterceptor.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptor,\n  factory: AuthInterceptor.ɵfac\n});\nexport { AuthInterceptor };","map":{"version":3,"names":["AuthInterceptor","constructor","authService","intercept","req","next","token","getToken","url","includes","console","log","handle","cloned","clone","headers","set","i0","ɵɵinject","i1","AuthService","factory","ɵfac"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\interceptors\\auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpInterceptor, HttpRequest, HttpHandler, HttpEvent } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { AuthService } from '../Services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthInterceptor implements HttpInterceptor {\r\n  constructor(private authService: AuthService) {}\r\n\r\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\r\n    const token = this.authService.getToken();\r\n\r\n    // Exclude requests to the ClassificationService API\r\n    if (req.url.includes('http://localhost:8000/predict/')) {\r\n      console.log('Skipping AuthInterceptor for:', req.url);\r\n      return next.handle(req);\r\n    }\r\n\r\n    if (token) {\r\n      console.log('Token:', token); // Debugging log for token\r\n      const cloned = req.clone({\r\n        headers: req.headers.set('Authorization', `Bearer ${token}`)\r\n      });\r\n      console.log('Outgoing request:', cloned); // Debugging log for request\r\n      return next.handle(cloned);\r\n    }\r\n\r\n    console.log('Outgoing request without token:', req); // Debugging log for requests without token\r\n    return next.handle(req);\r\n  }\r\n  \r\n}\r\n\r\n"],"mappings":";;AAKA,MACaA,eAAe;EAC1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,GAAqB,EAAEC,IAAiB;IAChD,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IAEzC;IACA,IAAIH,GAAG,CAACI,GAAG,CAACC,QAAQ,CAAC,gCAAgC,CAAC,EAAE;MACtDC,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAEP,GAAG,CAACI,GAAG,CAAC;MACrD,OAAOH,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;;IAGzB,IAAIE,KAAK,EAAE;MACTI,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEL,KAAK,CAAC,CAAC,CAAC;MAC9B,MAAMO,MAAM,GAAGT,GAAG,CAACU,KAAK,CAAC;QACvBC,OAAO,EAAEX,GAAG,CAACW,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,UAAUV,KAAK,EAAE;OAC5D,CAAC;MACFI,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAEE,MAAM,CAAC,CAAC,CAAC;MAC1C,OAAOR,IAAI,CAACO,MAAM,CAACC,MAAM,CAAC;;IAG5BH,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEP,GAAG,CAAC,CAAC,CAAC;IACrD,OAAOC,IAAI,CAACO,MAAM,CAACR,GAAG,CAAC;EACzB;;AAvBWJ,eAAe,C;mBAAfA,eAAe,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,WAAA;AAAA;AAAfpB,eAAe,C;SAAfA,eAAe;EAAAqB,OAAA,EAAfrB,eAAe,CAAAsB;AAAA;SAAftB,eAAe"},"metadata":{},"sourceType":"module","externalDependencies":[]}