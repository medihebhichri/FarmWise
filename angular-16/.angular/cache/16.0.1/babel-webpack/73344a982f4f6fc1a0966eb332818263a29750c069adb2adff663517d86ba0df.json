{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/predict-land/predict-land.component.ts\nimport { Component } from '@angular/core';\nimport { switchMap } from 'rxjs/operators';\nlet PredictLandComponent = class PredictLandComponent {\n  constructor(predictionService, currencyService) {\n    this.predictionService = predictionService;\n    this.currencyService = currencyService;\n    this.predictedUSD = null;\n    this.predictedTND = null;\n    this.predicting = false;\n    this.loadingRate = false;\n    this.inputDim = 25;\n  }\n  onSubmit(form) {\n    if (form.invalid) return;\n    // Reset everything\n    this.predictedUSD = null;\n    this.predictedTND = null;\n    this.predicting = true;\n    this.loadingRate = false;\n    // Build your feature vector\n    const zeros = Array(this.inputDim - 3).fill(0);\n    const features = [this.year, this.stateEncoded, this.landUseEncoded, ...zeros];\n    // 1) Predict USD, then 2) fetch rate, then compute TND\n    this.predictionService.predict(features).pipe(switchMap(({\n      predicted_price\n    }) => {\n      this.predictedUSD = predicted_price;\n      this.loadingRate = true;\n      return this.currencyService.getUsdToTndRate();\n    })).subscribe({\n      next: rate => {\n        this.predictedTND = this.predictedUSD * rate;\n        this.loadingRate = false;\n        this.predicting = false;\n      },\n      error: err => {\n        console.error('Error in prediction or rate fetch', err);\n        this.loadingRate = false;\n        this.predicting = false;\n      }\n    });\n  }\n};\nPredictLandComponent = __decorate([Component({\n  selector: 'app-predict-land',\n  templateUrl: './predict-land.component.html',\n  styleUrls: ['./predict-land.component.scss']\n})], PredictLandComponent);\nexport { PredictLandComponent };","map":{"version":3,"names":["Component","switchMap","PredictLandComponent","constructor","predictionService","currencyService","predictedUSD","predictedTND","predicting","loadingRate","inputDim","onSubmit","form","invalid","zeros","Array","fill","features","year","stateEncoded","landUseEncoded","predict","pipe","predicted_price","getUsdToTndRate","subscribe","next","rate","error","err","console","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\pages\\predict-land\\predict-land.component.ts"],"sourcesContent":["// src/app/predict-land/predict-land.component.ts\nimport { Component } from '@angular/core';\nimport { NgForm } from '@angular/forms';\n\nimport { switchMap }         from 'rxjs/operators';\n\n@Component({\n  selector: 'app-predict-land',\n  templateUrl: './predict-land.component.html',\n  styleUrls: ['./predict-land.component.scss']\n})\nexport class PredictLandComponent {\n  year!: number;\n  stateEncoded!: number;\n  landUseEncoded!: number;\n\n  predictedUSD: number | null = null;\n  predictedTND: number | null = null;\n  predicting    = false;\n  loadingRate   = false;\n\n  private inputDim = 25;\n\n  constructor(\n    private predictionService: PredictionService,\n    private currencyService:   CurrencyService\n  ) {}\n\n  onSubmit(form: NgForm) {\n    if (form.invalid) return;\n\n    // Reset everything\n    this.predictedUSD = null;\n    this.predictedTND = null;\n    this.predicting   = true;\n    this.loadingRate  = false;\n\n    // Build your feature vector\n    const zeros = Array(this.inputDim - 3).fill(0);\n    const features = [ this.year, this.stateEncoded, this.landUseEncoded, ...zeros ];\n\n    // 1) Predict USD, then 2) fetch rate, then compute TND\n    this.predictionService.predict(features).pipe(\n      switchMap(({ predicted_price }) => {\n        this.predictedUSD = predicted_price;\n        this.loadingRate  = true;\n        return this.currencyService.getUsdToTndRate();\n      })\n    )\n    .subscribe({\n      next: rate => {\n        this.predictedTND = this.predictedUSD! * rate;\n        this.loadingRate  = false;\n        this.predicting   = false;\n      },\n      error: err => {\n        console.error('Error in prediction or rate fetch', err);\n        this.loadingRate  = false;\n        this.predicting   = false;\n      }\n    });\n  }\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAASC,SAAS,QAAgB,gBAAgB;AAOlD,IAAaC,oBAAoB,GAAjC,MAAaA,oBAAoB;EAY/BC,YACUC,iBAAoC,EACpCC,eAAkC;IADlC,KAAAD,iBAAiB,GAAjBA,iBAAiB;IACjB,KAAAC,eAAe,GAAfA,eAAe;IATzB,KAAAC,YAAY,GAAkB,IAAI;IAClC,KAAAC,YAAY,GAAkB,IAAI;IAClC,KAAAC,UAAU,GAAM,KAAK;IACrB,KAAAC,WAAW,GAAK,KAAK;IAEb,KAAAC,QAAQ,GAAG,EAAE;EAKlB;EAEHC,QAAQA,CAACC,IAAY;IACnB,IAAIA,IAAI,CAACC,OAAO,EAAE;IAElB;IACA,IAAI,CAACP,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,YAAY,GAAG,IAAI;IACxB,IAAI,CAACC,UAAU,GAAK,IAAI;IACxB,IAAI,CAACC,WAAW,GAAI,KAAK;IAEzB;IACA,MAAMK,KAAK,GAAGC,KAAK,CAAC,IAAI,CAACL,QAAQ,GAAG,CAAC,CAAC,CAACM,IAAI,CAAC,CAAC,CAAC;IAC9C,MAAMC,QAAQ,GAAG,CAAE,IAAI,CAACC,IAAI,EAAE,IAAI,CAACC,YAAY,EAAE,IAAI,CAACC,cAAc,EAAE,GAAGN,KAAK,CAAE;IAEhF;IACA,IAAI,CAACV,iBAAiB,CAACiB,OAAO,CAACJ,QAAQ,CAAC,CAACK,IAAI,CAC3CrB,SAAS,CAAC,CAAC;MAAEsB;IAAe,CAAE,KAAI;MAChC,IAAI,CAACjB,YAAY,GAAGiB,eAAe;MACnC,IAAI,CAACd,WAAW,GAAI,IAAI;MACxB,OAAO,IAAI,CAACJ,eAAe,CAACmB,eAAe,EAAE;IAC/C,CAAC,CAAC,CACH,CACAC,SAAS,CAAC;MACTC,IAAI,EAAEC,IAAI,IAAG;QACX,IAAI,CAACpB,YAAY,GAAG,IAAI,CAACD,YAAa,GAAGqB,IAAI;QAC7C,IAAI,CAAClB,WAAW,GAAI,KAAK;QACzB,IAAI,CAACD,UAAU,GAAK,KAAK;MAC3B,CAAC;MACDoB,KAAK,EAAEC,GAAG,IAAG;QACXC,OAAO,CAACF,KAAK,CAAC,mCAAmC,EAAEC,GAAG,CAAC;QACvD,IAAI,CAACpB,WAAW,GAAI,KAAK;QACzB,IAAI,CAACD,UAAU,GAAK,KAAK;MAC3B;KACD,CAAC;EACJ;CACD;AAnDYN,oBAAoB,GAAA6B,UAAA,EALhC/B,SAAS,CAAC;EACTgC,QAAQ,EAAE,kBAAkB;EAC5BC,WAAW,EAAE,+BAA+B;EAC5CC,SAAS,EAAE,CAAC,+BAA+B;CAC5C,CAAC,C,EACWhC,oBAAoB,CAmDhC;SAnDYA,oBAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}