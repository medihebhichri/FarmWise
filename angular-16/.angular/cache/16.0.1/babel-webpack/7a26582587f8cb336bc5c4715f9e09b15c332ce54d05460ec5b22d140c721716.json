{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass reco {\n  constructor(http) {\n    this.http = http;\n  }\n  fetchSoil(lat, lon) {\n    const params = new HttpParams().set('lat', lat.toString()).set('lon', lon.toString()).set('property', 'Ktot,Nitrogen,Phosphorus,phh2o').set('depth', '0-5cm');\n    return this.http.get('https://rest.isric.org/soilgrids/v2.0/properties/query', {\n      params\n    }).pipe(map(resp => {\n      const p = resp.properties;\n      return {\n        K: p.Ktot.depths[0].values.mean,\n        N: p.Nitrogen.depths[0].values.mean,\n        P: p.Phosphorus.depths[0].values.mean,\n        ph: p.phh2o.depths[0].values.mean\n      };\n    }));\n  }\n  fetchMeteo(lat, lon) {\n    const params = new HttpParams().set('latitude', lat.toString()).set('longitude', lon.toString()).set('daily', 'temperature_2m_max,temperature_2m_min,precipitation_sum,relativehumidity_2m_max,relativehumidity_2m_min').set('timezone', 'UTC');\n    return this.http.get('https://api.open-meteo.com/v1/forecast', {\n      params\n    }).pipe(map(resp => {\n      const d = resp.daily;\n      const tmax = d.temperature_2m_max[0];\n      const tmin = d.temperature_2m_min[0];\n      const rhmax = d.relativehumidity_2m_max[0];\n      const rhmin = d.relativehumidity_2m_min[0];\n      return {\n        temperature_max: tmax,\n        temperature_min: tmin,\n        temperature: (tmax + tmin) / 2,\n        rainfall: d.precipitation_sum[0],\n        humidity_max: rhmax,\n        humidity_min: rhmin,\n        humidity: (rhmax + rhmin) / 2\n      };\n    }));\n  }\n  /** Uncomment if you want long-term climatology from NASA POWER */\n  // private fetchPower(lat: number, lon: number) {\n  //   const params = new HttpParams()\n  //     .set('latitude', lat.toString())\n  //     .set('longitude', lon.toString())\n  //     .set('parameters', 'T2M,PRECTOT,RH2M')\n  //     .set('community', 'ag')\n  //     .set('format', 'JSON');\n  //   return this.http\n  //     .get<any>('https://power.larc.nasa.gov/api/temporal/climatology/point', { params })\n  //     .pipe(\n  //       map(resp => {\n  //         const p = resp.properties.parameter;\n  //         const avg = (o: any) => {\n  //           const vals = Object.values(o);\n  //           return vals.reduce((s, x) => s + x, 0) / vals.length;\n  //         };\n  //         return {\n  //           temperature: avg(p.T2M),\n  //           rainfall: avg(p.PRECTOT),\n  //           humidity: avg(p.RH2M)\n  //         };\n  //       })\n  //     );\n  // }\n  getFeatures(lat, lon) {\n    return forkJoin({\n      soil: this.fetchSoil(lat, lon),\n      meteo: this.fetchMeteo(lat, lon)\n      // power: this.fetchPower(lat, lon)   // if using NASA POWER\n    }).pipe(map(({\n      soil,\n      meteo\n    }) => ({\n      ...soil,\n      ...meteo\n      // ...power    // merge in POWER fields if used\n    })));\n  }\n}\n\nreco.ɵfac = function reco_Factory(t) {\n  return new (t || reco)(i0.ɵɵinject(i1.HttpClient));\n};\nreco.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: reco,\n  factory: reco.ɵfac,\n  providedIn: 'root'\n});\nexport { reco };","map":{"version":3,"names":["HttpParams","forkJoin","map","reco","constructor","http","fetchSoil","lat","lon","params","set","toString","get","pipe","resp","p","properties","K","Ktot","depths","values","mean","N","Nitrogen","P","Phosphorus","ph","phh2o","fetchMeteo","d","daily","tmax","temperature_2m_max","tmin","temperature_2m_min","rhmax","relativehumidity_2m_max","rhmin","relativehumidity_2m_min","temperature_max","temperature_min","temperature","rainfall","precipitation_sum","humidity_max","humidity_min","humidity","getFeatures","soil","meteo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\Services\\recommendation.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Features } from '../models/features/features.model';\n\n@Injectable({ providedIn: 'root' })\nexport class reco {\n  constructor(private http: HttpClient) {}\n\n  private fetchSoil(lat: number, lon: number) {\n    const params = new HttpParams()\n      .set('lat', lat.toString())\n      .set('lon', lon.toString())\n      .set('property', 'Ktot,Nitrogen,Phosphorus,phh2o')\n      .set('depth', '0-5cm');\n    return this.http\n      .get<any>('https://rest.isric.org/soilgrids/v2.0/properties/query', { params })\n      .pipe(\n        map(resp => {\n          const p = resp.properties;\n          return {\n            K: p.Ktot.depths[0].values.mean,\n            N: p.Nitrogen.depths[0].values.mean,\n            P: p.Phosphorus.depths[0].values.mean,\n            ph: p.phh2o.depths[0].values.mean\n          };\n        })\n      );\n  }\n\n  private fetchMeteo(lat: number, lon: number) {\n    const params = new HttpParams()\n      .set('latitude', lat.toString())\n      .set('longitude', lon.toString())\n      .set('daily', 'temperature_2m_max,temperature_2m_min,precipitation_sum,relativehumidity_2m_max,relativehumidity_2m_min')\n      .set('timezone', 'UTC');\n    return this.http\n      .get<any>('https://api.open-meteo.com/v1/forecast', { params })\n      .pipe(\n        map(resp => {\n          const d = resp.daily;\n          const tmax = d.temperature_2m_max[0];\n          const tmin = d.temperature_2m_min[0];\n          const rhmax = d.relativehumidity_2m_max[0];\n          const rhmin = d.relativehumidity_2m_min[0];\n          return {\n            temperature_max: tmax,\n            temperature_min: tmin,\n            temperature: (tmax + tmin) / 2,\n            rainfall: d.precipitation_sum[0],\n            humidity_max: rhmax,\n            humidity_min: rhmin,\n            humidity: (rhmax + rhmin) / 2\n          };\n        })\n      );\n  }\n\n  /** Uncomment if you want long-term climatology from NASA POWER */\n  // private fetchPower(lat: number, lon: number) {\n  //   const params = new HttpParams()\n  //     .set('latitude', lat.toString())\n  //     .set('longitude', lon.toString())\n  //     .set('parameters', 'T2M,PRECTOT,RH2M')\n  //     .set('community', 'ag')\n  //     .set('format', 'JSON');\n  //   return this.http\n  //     .get<any>('https://power.larc.nasa.gov/api/temporal/climatology/point', { params })\n  //     .pipe(\n  //       map(resp => {\n  //         const p = resp.properties.parameter;\n  //         const avg = (o: any) => {\n  //           const vals = Object.values(o);\n  //           return vals.reduce((s, x) => s + x, 0) / vals.length;\n  //         };\n  //         return {\n  //           temperature: avg(p.T2M),\n  //           rainfall: avg(p.PRECTOT),\n  //           humidity: avg(p.RH2M)\n  //         };\n  //       })\n  //     );\n  // }\n\n  getFeatures(lat: number, lon: number): Observable<Features> {\n    return forkJoin({\n      soil: this.fetchSoil(lat, lon),\n      meteo: this.fetchMeteo(lat, lon),\n      // power: this.fetchPower(lat, lon)   // if using NASA POWER\n    }).pipe(\n      map(({ soil, meteo }) => ({\n        ...soil,\n        ...meteo\n        // ...power    // merge in POWER fields if used\n      }))\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}