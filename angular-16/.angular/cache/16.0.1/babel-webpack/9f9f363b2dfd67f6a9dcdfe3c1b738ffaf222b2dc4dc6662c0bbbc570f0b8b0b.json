{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass FeatureService {\n  constructor(http) {\n    this.http = http;\n  }\n  fetchSoil(lat, lon) {\n    const params = new HttpParams().set('lat', lat.toString()).set('lon', lon.toString()).set('property', 'Ktot,Nitrogen,Phosphorus,phh2o').set('depth', '0-5cm');\n    return this.http.get('/soilgrids', {\n      params\n    }).pipe(map(resp => {\n      const p = resp.properties;\n      return {\n        K: p.Ktot.depths[0].values.mean,\n        N: p.Nitrogen.depths[0].values.mean,\n        P: p.Phosphorus.depths[0].values.mean,\n        ph: p.phh2o.depths[0].values.mean\n      };\n    }));\n  }\n  fetchNASA(lat, lon) {\n    const params = new HttpParams().set('latitude', lat.toString()).set('longitude', lon.toString()).set('parameters', 'T2M,PRECTOT,RH2M').set('community', 'ag').set('format', 'JSON');\n    return this.http.get('/nasa-power', {\n      params\n    }).pipe(map(resp => {\n      const p = resp.properties.parameter;\n      // average 12 months\n      const avg = o => Object.values(o).reduce((s, v) => s + v, 0) / Object.values(o).length;\n      return {\n        temperature: avg(p.T2M),\n        rainfall: avg(p.PRECTOT),\n        humidity: avg(p.RH2M)\n      };\n    }));\n  }\n  /** returns { K, N, P, ph, temperature, rainfall, humidity } */\n  getFeatures(lat, lon) {\n    return forkJoin({\n      soil: this.fetchSoil(lat, lon),\n      climate: this.fetchNASA(lat, lon)\n    }).pipe(map(({\n      soil,\n      climate\n    }) => ({\n      ...soil,\n      ...climate\n    })));\n  }\n}\nFeatureService.ɵfac = function FeatureService_Factory(t) {\n  return new (t || FeatureService)(i0.ɵɵinject(i1.HttpClient));\n};\nFeatureService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: FeatureService,\n  factory: FeatureService.ɵfac,\n  providedIn: 'root'\n});\nexport { FeatureService };","map":{"version":3,"names":["HttpParams","forkJoin","map","FeatureService","constructor","http","fetchSoil","lat","lon","params","set","toString","get","pipe","resp","p","properties","K","Ktot","depths","values","mean","N","Nitrogen","P","Phosphorus","ph","phh2o","fetchNASA","parameter","avg","o","Object","reduce","s","v","length","temperature","T2M","rainfall","PRECTOT","humidity","RH2M","getFeatures","soil","climate","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\Services\\recommendation.service.ts"],"sourcesContent":["// src/app/services/feature.service.ts\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { forkJoin, Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { Features } from '../models/feature.model';\n\n@Injectable({ providedIn: 'root' })\nexport class FeatureService {\n  constructor(private http: HttpClient) {}\n\n  private fetchSoil(lat: number, lon: number) {\n    const params = new HttpParams()\n      .set('lat', lat.toString())\n      .set('lon', lon.toString())\n      .set('property', 'Ktot,Nitrogen,Phosphorus,phh2o')\n      .set('depth', '0-5cm');\n    return this.http\n      .get<any>('/soilgrids', { params })\n      .pipe(\n        map(resp => {\n          const p = resp.properties;\n          return {\n            K: p.Ktot.depths[0].values.mean,\n            N: p.Nitrogen.depths[0].values.mean,\n            P: p.Phosphorus.depths[0].values.mean,\n            ph: p.phh2o.depths[0].values.mean\n          };\n        })\n      );\n  }\n\n  private fetchNASA(lat: number, lon: number) {\n    const params = new HttpParams()\n      .set('latitude', lat.toString())\n      .set('longitude', lon.toString())\n      .set('parameters', 'T2M,PRECTOT,RH2M')\n      .set('community', 'ag')\n      .set('format', 'JSON');\n    return this.http\n      .get<any>('/nasa-power', { params })\n      .pipe(\n        map(resp => {\n          const p = resp.properties.parameter;\n          // average 12 months\n          const avg = (o: Record<string, number>) =>\n            Object.values(o).reduce((s, v) => s + v, 0) / Object.values(o).length;\n          return {\n            temperature: avg(p.T2M),\n            rainfall:    avg(p.PRECTOT),\n            humidity:    avg(p.RH2M)\n          };\n        })\n      );\n  }\n\n  /** returns { K, N, P, ph, temperature, rainfall, humidity } */\n  getFeatures(lat: number, lon: number): Observable<Features> {\n    return forkJoin({\n      soil: this.fetchSoil(lat, lon),\n      climate: this.fetchNASA(lat, lon)\n    }).pipe(\n      map(({ soil, climate }) => ({\n        ...soil,\n        ...climate\n      }))\n    );\n  }\n}\n"],"mappings":"AAEA,SAAqBA,UAAU,QAAQ,sBAAsB;AAC7D,SAASC,QAAQ,QAAoB,MAAM;AAC3C,SAASC,GAAG,QAAQ,gBAAgB;;;AAGpC,MACaC,cAAc;EACzBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAe;EAE/BC,SAASA,CAACC,GAAW,EAAEC,GAAW;IACxC,MAAMC,MAAM,GAAG,IAAIT,UAAU,EAAE,CAC5BU,GAAG,CAAC,KAAK,EAAEH,GAAG,CAACI,QAAQ,EAAE,CAAC,CAC1BD,GAAG,CAAC,KAAK,EAAEF,GAAG,CAACG,QAAQ,EAAE,CAAC,CAC1BD,GAAG,CAAC,UAAU,EAAE,gCAAgC,CAAC,CACjDA,GAAG,CAAC,OAAO,EAAE,OAAO,CAAC;IACxB,OAAO,IAAI,CAACL,IAAI,CACbO,GAAG,CAAM,YAAY,EAAE;MAAEH;IAAM,CAAE,CAAC,CAClCI,IAAI,CACHX,GAAG,CAACY,IAAI,IAAG;MACT,MAAMC,CAAC,GAAGD,IAAI,CAACE,UAAU;MACzB,OAAO;QACLC,CAAC,EAAEF,CAAC,CAACG,IAAI,CAACC,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,IAAI;QAC/BC,CAAC,EAAEP,CAAC,CAACQ,QAAQ,CAACJ,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,IAAI;QACnCG,CAAC,EAAET,CAAC,CAACU,UAAU,CAACN,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,IAAI;QACrCK,EAAE,EAAEX,CAAC,CAACY,KAAK,CAACR,MAAM,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC;OAC9B;IACH,CAAC,CAAC,CACH;EACL;EAEQO,SAASA,CAACrB,GAAW,EAAEC,GAAW;IACxC,MAAMC,MAAM,GAAG,IAAIT,UAAU,EAAE,CAC5BU,GAAG,CAAC,UAAU,EAAEH,GAAG,CAACI,QAAQ,EAAE,CAAC,CAC/BD,GAAG,CAAC,WAAW,EAAEF,GAAG,CAACG,QAAQ,EAAE,CAAC,CAChCD,GAAG,CAAC,YAAY,EAAE,kBAAkB,CAAC,CACrCA,GAAG,CAAC,WAAW,EAAE,IAAI,CAAC,CACtBA,GAAG,CAAC,QAAQ,EAAE,MAAM,CAAC;IACxB,OAAO,IAAI,CAACL,IAAI,CACbO,GAAG,CAAM,aAAa,EAAE;MAAEH;IAAM,CAAE,CAAC,CACnCI,IAAI,CACHX,GAAG,CAACY,IAAI,IAAG;MACT,MAAMC,CAAC,GAAGD,IAAI,CAACE,UAAU,CAACa,SAAS;MACnC;MACA,MAAMC,GAAG,GAAIC,CAAyB,IACpCC,MAAM,CAACZ,MAAM,CAACW,CAAC,CAAC,CAACE,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,GAAGC,CAAC,EAAE,CAAC,CAAC,GAAGH,MAAM,CAACZ,MAAM,CAACW,CAAC,CAAC,CAACK,MAAM;MACvE,OAAO;QACLC,WAAW,EAAEP,GAAG,CAACf,CAAC,CAACuB,GAAG,CAAC;QACvBC,QAAQ,EAAKT,GAAG,CAACf,CAAC,CAACyB,OAAO,CAAC;QAC3BC,QAAQ,EAAKX,GAAG,CAACf,CAAC,CAAC2B,IAAI;OACxB;IACH,CAAC,CAAC,CACH;EACL;EAEA;EACAC,WAAWA,CAACpC,GAAW,EAAEC,GAAW;IAClC,OAAOP,QAAQ,CAAC;MACd2C,IAAI,EAAE,IAAI,CAACtC,SAAS,CAACC,GAAG,EAAEC,GAAG,CAAC;MAC9BqC,OAAO,EAAE,IAAI,CAACjB,SAAS,CAACrB,GAAG,EAAEC,GAAG;KACjC,CAAC,CAACK,IAAI,CACLX,GAAG,CAAC,CAAC;MAAE0C,IAAI;MAAEC;IAAO,CAAE,MAAM;MAC1B,GAAGD,IAAI;MACP,GAAGC;KACJ,CAAC,CAAC,CACJ;EACH;;AA3DW1C,cAAc,C;mBAAdA,cAAc,EAAA2C,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAd9C,cAAc,C;SAAdA,cAAc;EAAA+C,OAAA,EAAd/C,cAAc,CAAAgD,IAAA;EAAAC,UAAA,EADD;AAAM;SACnBjD,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}