{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport * as L from 'leaflet';\nlet WeatherComponent = class WeatherComponent {\n  constructor(weatherService, cropService) {\n    this.weatherService = weatherService;\n    this.cropService = cropService;\n    this.lat = 36.8;\n    this.lon = 10.2;\n    this.predictedCrop = null;\n    this.weatherData = null;\n    this.marker = null;\n    this.soilData = {\n      ph: 6.5,\n      N: 0.3,\n      P: 35,\n      K: 50\n    };\n  }\n  ngAfterViewInit() {\n    const map = L.map('map').setView([this.lat, this.lon], 6);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; OpenStreetMap contributors'\n    }).addTo(map);\n    map.on('click', e => {\n      this.lat = e.latlng.lat;\n      this.lon = e.latlng.lng;\n      if (this.marker) this.marker.remove();\n      this.marker = L.marker([this.lat, this.lon]).addTo(map);\n      this.fetchWeather(); // auto-fetch weather after selection\n    });\n  }\n\n  fetchWeather() {\n    this.weatherService.getWeather(this.lat, this.lon).subscribe({\n      next: data => this.weatherData = data,\n      error: err => console.error('Weather error:', err)\n    });\n  }\n  onSubmit() {\n    if (!this.weatherData) {\n      alert(\"Please click on the map to select a location and fetch weather.\");\n      return;\n    }\n    const input = {\n      K: this.soilData.K,\n      N: this.soilData.N,\n      P: this.soilData.P,\n      ph: this.soilData.ph,\n      humidity: this.weatherData.humidity,\n      temperature: this.weatherData.temperature,\n      rainfall: this.weatherData.rainfall\n    };\n    this.cropService.predictCrop(input).subscribe({\n      next: res => this.predictedCrop = res.recommended_crop,\n      error: err => console.error('Prediction error:', err)\n    });\n  }\n};\nWeatherComponent = __decorate([Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html'\n})], WeatherComponent);\nexport { WeatherComponent };","map":{"version":3,"names":["Component","L","WeatherComponent","constructor","weatherService","cropService","lat","lon","predictedCrop","weatherData","marker","soilData","ph","N","P","K","ngAfterViewInit","map","setView","tileLayer","attribution","addTo","on","e","latlng","lng","remove","fetchWeather","getWeather","subscribe","next","data","error","err","console","onSubmit","alert","input","humidity","temperature","rainfall","predictCrop","res","recommended_crop","__decorate","selector","templateUrl"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\pages\\feature\\weather.component.ts"],"sourcesContent":["import { Component, AfterViewInit } from '@angular/core';\nimport * as L from 'leaflet';\nimport { WeatherService } from '../../Services/weather.service';\nimport { CropService } from '../../Services/crop.service';\n\n@Component({\n  selector: 'app-weather',\n  templateUrl: './weather.component.html'\n})\nexport class WeatherComponent implements AfterViewInit {\n  lat: number = 36.8;\n  lon: number = 10.2;\n  predictedCrop: string | null = null;\n  weatherData: any = null;\n  marker: L.Marker | null = null;\n\n  soilData = {\n    ph: 6.5,\n    N: 0.3,\n    P: 35,\n    K: 50\n  };\n\n  constructor(\n    private weatherService: WeatherService,\n    private cropService: CropService\n  ) {}\n\n  ngAfterViewInit(): void {\n    const map = L.map('map').setView([this.lat, this.lon], 6);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '&copy; OpenStreetMap contributors'\n    }).addTo(map);\n\n    map.on('click', (e: L.LeafletMouseEvent) => {\n      this.lat = e.latlng.lat;\n      this.lon = e.latlng.lng;\n\n      if (this.marker) this.marker.remove();\n      this.marker = L.marker([this.lat, this.lon]).addTo(map);\n\n      this.fetchWeather(); // auto-fetch weather after selection\n    });\n  }\n\n  fetchWeather() {\n    this.weatherService.getWeather(this.lat, this.lon).subscribe({\n      next: (data) => this.weatherData = data,\n      error: (err) => console.error('Weather error:', err)\n    });\n  }\n\n  onSubmit() {\n    if (!this.weatherData) {\n      alert(\"Please click on the map to select a location and fetch weather.\");\n      return;\n    }\n\n    const input = {\n      K: this.soilData.K,\n      N: this.soilData.N,\n      P: this.soilData.P,\n      ph: this.soilData.ph,\n      humidity: this.weatherData.humidity,\n      temperature: this.weatherData.temperature,\n      rainfall: this.weatherData.rainfall\n    };\n\n    this.cropService.predictCrop(input).subscribe({\n      next: (res) => this.predictedCrop = res.recommended_crop,\n      error: (err) => console.error('Prediction error:', err)\n    });\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}