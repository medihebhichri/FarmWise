{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from '@angular/forms';\nlet LoginComponent = class LoginComponent {\n  constructor(authService, router, fb) {\n    this.authService = authService;\n    this.router = router;\n    this.fb = fb;\n    this.username = '';\n    this.password = '';\n    this.errorMessage = '';\n    this.form = this.fb.group({\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n  onLogin() {\n    const credentials = {\n      username: this.username,\n      password: this.password\n    };\n    this.authService.signin(credentials).subscribe({\n      next: res => {\n        localStorage.setItem('token', res.token);\n        localStorage.setItem('username', res.username);\n        localStorage.setItem('roles', JSON.stringify(res.roles));\n        const roleNames = res.roles;\n        if (roleNames.includes('ROLE_ADMIN')) {\n          this.router.navigate(['/dashboard']);\n        } else if (roleNames.includes('ROLE_USER')) {\n          this.router.navigate(['/dashboard']);\n        } else {\n          this.router.navigate(['/']);\n        }\n      },\n      error: () => {\n        this.errorMessage = 'Invalid username or password';\n      }\n    });\n  }\n  onSubmit() {\n    if (this.form.valid) {\n      const {\n        email,\n        password\n      } = this.form.value;\n      this.username = email;\n      this.password = password;\n      this.onLogin();\n    } else {\n      this.errorMessage = 'Please fill in all required fields correctly.';\n    }\n  }\n};\nLoginComponent = __decorate([Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  standalone: false,\n  styleUrls: ['./login.component.scss']\n})], LoginComponent);\nexport { LoginComponent };","map":{"version":3,"names":["Component","Validators","LoginComponent","constructor","authService","router","fb","username","password","errorMessage","form","group","email","required","onLogin","credentials","signin","subscribe","next","res","localStorage","setItem","token","JSON","stringify","roles","roleNames","includes","navigate","error","onSubmit","valid","value","__decorate","selector","templateUrl","standalone","styleUrls"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\pages\\auth\\login\\login.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/Services/auth.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  standalone: false,\n  styleUrls: ['./login.component.scss'], \n})\nexport class LoginComponent {\n  username = '';\n  password = '';\n  errorMessage = '';\n  form: FormGroup;\n\n  constructor(private authService: AuthService, private router: Router, private fb: FormBuilder) {\n    this.form = this.fb.group({\n      email: ['', [Validators.required]],\n      password: ['', [Validators.required]]\n    });\n  }\n\n  onLogin(): void {\n    const credentials = { username: this.username, password: this.password };\n  \n    this.authService.signin(credentials).subscribe({\n      next: (res) => {\n        localStorage.setItem('token', res.token);\n        localStorage.setItem('username', res.username);\n        localStorage.setItem('roles', JSON.stringify(res.roles));\n  \n        const roleNames: string[] = res.roles;\n  \n        if (roleNames.includes('ROLE_ADMIN')) {\n          this.router.navigate(['/dashboard']);\n        } else if (roleNames.includes('ROLE_USER')) {\n          this.router.navigate(['/dashboard']);\n        } else {\n          this.router.navigate(['/']);\n        }\n      },\n      error: () => {\n        this.errorMessage = 'Invalid username or password';\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.form.valid) {\n      const { email, password } = this.form.value;\n      this.username = email;\n      this.password = password;\n      this.onLogin();\n    } else {\n      this.errorMessage = 'Please fill in all required fields correctly.';\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAGzC,SAAiCC,UAAU,QAAQ,gBAAgB;AAQnE,IAAaC,cAAc,GAA3B,MAAaA,cAAc;EAMzBC,YAAoBC,WAAwB,EAAUC,MAAc,EAAUC,EAAe;IAAzE,KAAAF,WAAW,GAAXA,WAAW;IAAuB,KAAAC,MAAM,GAANA,MAAM;IAAkB,KAAAC,EAAE,GAAFA,EAAE;IALhF,KAAAC,QAAQ,GAAG,EAAE;IACb,KAAAC,QAAQ,GAAG,EAAE;IACb,KAAAC,YAAY,GAAG,EAAE;IAIf,IAAI,CAACC,IAAI,GAAG,IAAI,CAACJ,EAAE,CAACK,KAAK,CAAC;MACxBC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACX,UAAU,CAACY,QAAQ,CAAC,CAAC;MAClCL,QAAQ,EAAE,CAAC,EAAE,EAAE,CAACP,UAAU,CAACY,QAAQ,CAAC;KACrC,CAAC;EACJ;EAEAC,OAAOA,CAAA;IACL,MAAMC,WAAW,GAAG;MAAER,QAAQ,EAAE,IAAI,CAACA,QAAQ;MAAEC,QAAQ,EAAE,IAAI,CAACA;IAAQ,CAAE;IAExE,IAAI,CAACJ,WAAW,CAACY,MAAM,CAACD,WAAW,CAAC,CAACE,SAAS,CAAC;MAC7CC,IAAI,EAAGC,GAAG,IAAI;QACZC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEF,GAAG,CAACG,KAAK,CAAC;QACxCF,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,GAAG,CAACZ,QAAQ,CAAC;QAC9Ca,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEE,IAAI,CAACC,SAAS,CAACL,GAAG,CAACM,KAAK,CAAC,CAAC;QAExD,MAAMC,SAAS,GAAaP,GAAG,CAACM,KAAK;QAErC,IAAIC,SAAS,CAACC,QAAQ,CAAC,YAAY,CAAC,EAAE;UACpC,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;SACrC,MAAM,IAAIF,SAAS,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;UAC1C,IAAI,CAACtB,MAAM,CAACuB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;SACrC,MAAM;UACL,IAAI,CAACvB,MAAM,CAACuB,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC;;MAE/B,CAAC;MACDC,KAAK,EAAEA,CAAA,KAAK;QACV,IAAI,CAACpB,YAAY,GAAG,8BAA8B;MACpD;KACD,CAAC;EACJ;EAEAqB,QAAQA,CAAA;IACN,IAAI,IAAI,CAACpB,IAAI,CAACqB,KAAK,EAAE;MACnB,MAAM;QAAEnB,KAAK;QAAEJ;MAAQ,CAAE,GAAG,IAAI,CAACE,IAAI,CAACsB,KAAK;MAC3C,IAAI,CAACzB,QAAQ,GAAGK,KAAK;MACrB,IAAI,CAACJ,QAAQ,GAAGA,QAAQ;MACxB,IAAI,CAACM,OAAO,EAAE;KACf,MAAM;MACL,IAAI,CAACL,YAAY,GAAG,+CAA+C;;EAEvE;CACD;AAhDYP,cAAc,GAAA+B,UAAA,EAN1BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,UAAU,EAAE,KAAK;EACjBC,SAAS,EAAE,CAAC,wBAAwB;CACrC,CAAC,C,EACWnC,cAAc,CAgD1B;SAhDYA,cAAc"},"metadata":{},"sourceType":"module","externalDependencies":[]}