{"ast":null,"code":"import { tap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nclass AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.baseUrl = 'http://localhost:8080/api/v1/auth';\n  }\n  signup(userData) {\n    return this.http.post(`${this.baseUrl}/signup`, userData, {\n      responseType: 'text'\n    });\n  }\n  getUserRoles() {\n    const roles = localStorage.getItem('roles');\n    return roles ? JSON.parse(roles) : [];\n  }\n  hasRole(role) {\n    return this.getUserRoles().includes(role);\n  }\n  signin(credentials) {\n    return this.http.post(`${this.baseUrl}/signin`, credentials).pipe(tap(res => {\n      console.log('Login response:', res); // ✅ Add this\n      localStorage.setItem('token', res.token);\n      // Required:\n      localStorage.setItem('username', res.username);\n      localStorage.setItem('roles', JSON.stringify(res.roles)); // ✅ Must be here\n    }));\n  }\n\n  getAllUsers() {\n    return this.http.get('http://localhost:8080/api/v1/users');\n  }\n  getRoles() {\n    const roles = localStorage.getItem('roles');\n    return roles ? JSON.parse(roles) : [];\n  }\n  getUserDetails() {\n    return this.http.get(`${this.baseUrl}/user`);\n  }\n  saveToken(token, tokenType) {\n    localStorage.setItem('token', token);\n    localStorage.setItem('tokenType', tokenType);\n  }\n  getToken() {\n    return localStorage.getItem('token');\n  }\n  getTokenType() {\n    return localStorage.getItem('tokenType');\n  }\n  isLoggedIn() {\n    return !!this.getToken();\n  }\n  logout() {\n    localStorage.clear();\n    this.router.navigate(['/login']);\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});\nexport { AuthService };","map":{"version":3,"names":["tap","AuthService","constructor","http","router","baseUrl","signup","userData","post","responseType","getUserRoles","roles","localStorage","getItem","JSON","parse","hasRole","role","includes","signin","credentials","pipe","res","console","log","setItem","token","username","stringify","getAllUsers","get","getRoles","getUserDetails","saveToken","tokenType","getToken","getTokenType","isLoggedIn","logout","clear","navigate","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\Services\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { tap } from 'rxjs/operators';\r\nimport { Router } from '@angular/router';\r\n\r\n@Injectable({ providedIn: 'root' })\r\nexport class AuthService {\r\n  private baseUrl = 'http://localhost:8080/api/v1/auth';\r\n\r\n  constructor(private http: HttpClient, private router: Router) {}\r\n\r\n  signup(userData: any): Observable<any> {\r\n    return this.http.post(`${this.baseUrl}/signup`, userData, { responseType: 'text' });\r\n  }\r\n  \r\n  getUserRoles(): string[] {\r\n    const roles = localStorage.getItem('roles');\r\n    return roles ? JSON.parse(roles) : [];\r\n  }\r\n  \r\n  hasRole(role: string): boolean {\r\n    return this.getUserRoles().includes(role);\r\n  }\r\n  \r\n  signin(credentials: any): Observable<any> {\r\n    return this.http.post<any>(`${this.baseUrl}/signin`, credentials).pipe(\r\n      tap((res) => {\r\n        console.log('Login response:', res); // ✅ Add this\r\n          localStorage.setItem('token', res.token);\r\n        \r\n        // Required:\r\n        localStorage.setItem('username', res.username);\r\n        localStorage.setItem('roles', JSON.stringify(res.roles)); // ✅ Must be here\r\n      })\r\n    );\r\n  }\r\n  getAllUsers(): Observable<any[]> {\r\n    return this.http.get<any[]>('http://localhost:8080/api/v1/users');\r\n  }\r\n  \r\n  \r\n  getRoles(): string[] {\r\n    const roles = localStorage.getItem('roles');\r\n    return roles ? JSON.parse(roles) : [];\r\n  }\r\n  \r\n  \r\n  getUserDetails(): Observable<any> {\r\n    return this.http.get(`${this.baseUrl}/user`);\r\n  }\r\n\r\n  saveToken(token: string, tokenType: string): void {\r\n    localStorage.setItem('token', token);\r\n    localStorage.setItem('tokenType', tokenType);\r\n  }\r\n\r\n  getToken(): string | null {\r\n    return localStorage.getItem('token');\r\n  }\r\n\r\n  getTokenType(): string | null {\r\n    return localStorage.getItem('tokenType');\r\n  }\r\n\r\n  isLoggedIn(): boolean {\r\n    return !!this.getToken();\r\n  }\r\n\r\n  logout(): void {\r\n    localStorage.clear();\r\n    this.router.navigate(['/login']);\r\n  }\r\n}\r\n\r\n"],"mappings":"AAGA,SAASA,GAAG,QAAQ,gBAAgB;;;;AAGpC,MACaC,WAAW;EAGtBC,YAAoBC,IAAgB,EAAUC,MAAc;IAAxC,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,MAAM,GAANA,MAAM;IAF5C,KAAAC,OAAO,GAAG,mCAAmC;EAEU;EAE/DC,MAAMA,CAACC,QAAa;IAClB,OAAO,IAAI,CAACJ,IAAI,CAACK,IAAI,CAAC,GAAG,IAAI,CAACH,OAAO,SAAS,EAAEE,QAAQ,EAAE;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EACrF;EAEAC,YAAYA,CAAA;IACV,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOF,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,EAAE;EACvC;EAEAK,OAAOA,CAACC,IAAY;IAClB,OAAO,IAAI,CAACP,YAAY,EAAE,CAACQ,QAAQ,CAACD,IAAI,CAAC;EAC3C;EAEAE,MAAMA,CAACC,WAAgB;IACrB,OAAO,IAAI,CAACjB,IAAI,CAACK,IAAI,CAAM,GAAG,IAAI,CAACH,OAAO,SAAS,EAAEe,WAAW,CAAC,CAACC,IAAI,CACpErB,GAAG,CAAEsB,GAAG,IAAI;MACVC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEF,GAAG,CAAC,CAAC,CAAC;MACnCV,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEH,GAAG,CAACI,KAAK,CAAC;MAE1C;MACAd,YAAY,CAACa,OAAO,CAAC,UAAU,EAAEH,GAAG,CAACK,QAAQ,CAAC;MAC9Cf,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEX,IAAI,CAACc,SAAS,CAACN,GAAG,CAACX,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5D,CAAC,CAAC,CACH;EACH;;EACAkB,WAAWA,CAAA;IACT,OAAO,IAAI,CAAC1B,IAAI,CAAC2B,GAAG,CAAQ,oCAAoC,CAAC;EACnE;EAGAC,QAAQA,CAAA;IACN,MAAMpB,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;IAC3C,OAAOF,KAAK,GAAGG,IAAI,CAACC,KAAK,CAACJ,KAAK,CAAC,GAAG,EAAE;EACvC;EAGAqB,cAAcA,CAAA;IACZ,OAAO,IAAI,CAAC7B,IAAI,CAAC2B,GAAG,CAAC,GAAG,IAAI,CAACzB,OAAO,OAAO,CAAC;EAC9C;EAEA4B,SAASA,CAACP,KAAa,EAAEQ,SAAiB;IACxCtB,YAAY,CAACa,OAAO,CAAC,OAAO,EAAEC,KAAK,CAAC;IACpCd,YAAY,CAACa,OAAO,CAAC,WAAW,EAAES,SAAS,CAAC;EAC9C;EAEAC,QAAQA,CAAA;IACN,OAAOvB,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EACtC;EAEAuB,YAAYA,CAAA;IACV,OAAOxB,YAAY,CAACC,OAAO,CAAC,WAAW,CAAC;EAC1C;EAEAwB,UAAUA,CAAA;IACR,OAAO,CAAC,CAAC,IAAI,CAACF,QAAQ,EAAE;EAC1B;EAEAG,MAAMA,CAAA;IACJ1B,YAAY,CAAC2B,KAAK,EAAE;IACpB,IAAI,CAACnC,MAAM,CAACoC,QAAQ,CAAC,CAAC,QAAQ,CAAC,CAAC;EAClC;;AAjEWvC,WAAW,C;mBAAXA,WAAW,EAAAwC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,MAAA;AAAA;AAAX7C,WAAW,C;SAAXA,WAAW;EAAA8C,OAAA,EAAX9C,WAAW,CAAA+C,IAAA;EAAAC,UAAA,EADE;AAAM;SACnBhD,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}