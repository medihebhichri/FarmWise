{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { forkJoin, of, throwError } from 'rxjs';\nimport { map, retryWhen, delay, catchError, concatMap } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass Rec {\n  constructor(http) {\n    this.http = http;\n  }\n  soilUrl(lat, lon) {\n    // Build the original SoilGrids URL\n    const params = new HttpParams().set('lat', lat.toString()).set('lon', lon.toString()).set('property', 'Ktot,Nitrogen,Phosphorus,phh2o').set('depth', '0-5cm');\n    return `https://rest.isric.org/soilgrids/v2.0/properties/query?${params.toString()}`;\n  }\n  fetchSoil(lat, lon) {\n    // Use a public CORS proxy so the browser can actually talk to SoilGrids\n    const original = this.soilUrl(lat, lon);\n    const proxy = `https://api.allorigins.win/raw?url=${encodeURIComponent(original)}`;\n    return this.http.get(proxy).pipe(\n    // in case SoilGrids is temporarily returning 502\n    retryWhen(errors => errors.pipe(concatMap((err, i) => i < 2 ? of(err).pipe(delay(1000)) // wait 1s, retry\n    : throwError(err)))), map(resp => {\n      const p = resp.properties;\n      return {\n        K: p.Ktot.depths[0].values.mean,\n        N: p.Nitrogen.depths[0].values.mean,\n        P: p.Phosphorus.depths[0].values.mean,\n        ph: p.phh2o.depths[0].values.mean\n      };\n    }), catchError(err => {\n      console.warn('SoilGrids failed → using fallback', err);\n      // return default or nulls instead of erroring the whole stream\n      return of({\n        K: 0,\n        N: 0,\n        P: 0,\n        ph: 0\n      });\n    }));\n  }\n  fetchMeteo(lat, lon) {\n    const params = new HttpParams().set('latitude', lat.toString()).set('longitude', lon.toString()).set('daily', 'temperature_2m_max,temperature_2m_min,precipitation_sum,relativehumidity_2m_max,relativehumidity_2m_min').set('timezone', 'UTC');\n    return this.http.get('https://api.open-meteo.com/v1/forecast', {\n      params\n    }).pipe(map(resp => {\n      const d = resp.daily;\n      const tmax = d.temperature_2m_max[0];\n      const tmin = d.temperature_2m_min[0];\n      const rhmax = d.relativehumidity_2m_max[0];\n      const rhmin = d.relativehumidity_2m_min[0];\n      return {\n        temperature_max: tmax,\n        temperature_min: tmin,\n        temperature: (tmax + tmin) / 2,\n        rainfall: d.precipitation_sum[0],\n        humidity_max: rhmax,\n        humidity_min: rhmin,\n        humidity: (rhmax + rhmin) / 2\n      };\n    }));\n  }\n  getFeatures(lat, lon) {\n    return forkJoin({\n      soil: this.fetchSoil(lat, lon),\n      meteo: this.fetchMeteo(lat, lon)\n    }).pipe(map(({\n      soil,\n      meteo\n    }) => ({\n      ...soil,\n      ...meteo\n    })));\n  }\n}\nRec.ɵfac = function Rec_Factory(t) {\n  return new (t || Rec)(i0.ɵɵinject(i1.HttpClient));\n};\nRec.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: Rec,\n  factory: Rec.ɵfac,\n  providedIn: 'root'\n});\nexport { Rec };","map":{"version":3,"names":["HttpParams","forkJoin","of","throwError","map","retryWhen","delay","catchError","concatMap","Rec","constructor","http","soilUrl","lat","lon","params","set","toString","fetchSoil","original","proxy","encodeURIComponent","get","pipe","errors","err","i","resp","p","properties","K","Ktot","depths","values","mean","N","Nitrogen","P","Phosphorus","ph","phh2o","console","warn","fetchMeteo","d","daily","tmax","temperature_2m_max","tmin","temperature_2m_min","rhmax","relativehumidity_2m_max","rhmin","relativehumidity_2m_min","temperature_max","temperature_min","temperature","rainfall","precipitation_sum","humidity_max","humidity_min","humidity","getFeatures","soil","meteo","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\Services\\recommendation.service.ts"],"sourcesContent":["// src/app/services/feature.service.ts\n\nimport { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { forkJoin, Observable, of, throwError } from 'rxjs';\nimport { map, retryWhen, delay, take, catchError, concatMap } from 'rxjs/operators';\nimport { Features } from '../models/feature.model';\n\n@Injectable({ providedIn: 'root' })\nexport class Rec {\n  constructor(private http: HttpClient) {}\n\n  private soilUrl(lat: number, lon: number) {\n    // Build the original SoilGrids URL\n    const params = new HttpParams()\n      .set('lat', lat.toString())\n      .set('lon', lon.toString())\n      .set('property', 'Ktot,Nitrogen,Phosphorus,phh2o')\n      .set('depth', '0-5cm');\n\n    return `https://rest.isric.org/soilgrids/v2.0/properties/query?${params.toString()}`;\n  }\n\n  private fetchSoil(lat: number, lon: number) {\n    // Use a public CORS proxy so the browser can actually talk to SoilGrids\n    const original = this.soilUrl(lat, lon);\n    const proxy = `https://api.allorigins.win/raw?url=${encodeURIComponent(original)}`;\n\n    return this.http.get<any>(proxy).pipe(\n      // in case SoilGrids is temporarily returning 502\n      retryWhen(errors =>\n        errors.pipe(\n          concatMap((err, i) => i < 2\n            ? of(err).pipe(delay(1000))    // wait 1s, retry\n            : throwError(err)\n          )\n        )\n      ),\n      map(resp => {\n        const p = resp.properties;\n        return {\n          K: p.Ktot.depths[0].values.mean,\n          N: p.Nitrogen.depths[0].values.mean,\n          P: p.Phosphorus.depths[0].values.mean,\n          ph: p.phh2o.depths[0].values.mean\n        };\n      }),\n      catchError(err => {\n        console.warn('SoilGrids failed → using fallback', err);\n        // return default or nulls instead of erroring the whole stream\n        return of({ K: 0, N: 0, P: 0, ph: 0 });\n      })\n    );\n  }\n\n  private fetchMeteo(lat: number, lon: number) {\n    const params = new HttpParams()\n      .set('latitude', lat.toString())\n      .set('longitude', lon.toString())\n      .set('daily', 'temperature_2m_max,temperature_2m_min,precipitation_sum,relativehumidity_2m_max,relativehumidity_2m_min')\n      .set('timezone', 'UTC');\n\n    return this.http\n      .get<any>('https://api.open-meteo.com/v1/forecast', { params })\n      .pipe(\n        map(resp => {\n          const d = resp.daily;\n          const tmax = d.temperature_2m_max[0];\n          const tmin = d.temperature_2m_min[0];\n          const rhmax = d.relativehumidity_2m_max[0];\n          const rhmin = d.relativehumidity_2m_min[0];\n          return {\n            temperature_max: tmax,\n            temperature_min: tmin,\n            temperature: (tmax + tmin) / 2,\n            rainfall: d.precipitation_sum[0],\n            humidity_max: rhmax,\n            humidity_min: rhmin,\n            humidity: (rhmax + rhmin) / 2\n          };\n        })\n      );\n  }\n\n  getFeatures(lat: number, lon: number): Observable<Features> {\n    return forkJoin({\n      soil: this.fetchSoil(lat, lon),\n      meteo: this.fetchMeteo(lat, lon)\n    }).pipe(\n      map(({ soil, meteo }) => ({\n        ...soil,\n        ...meteo\n      }))\n    );\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}