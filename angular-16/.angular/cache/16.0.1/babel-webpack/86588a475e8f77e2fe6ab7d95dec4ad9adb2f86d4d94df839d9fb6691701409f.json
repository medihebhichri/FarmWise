{"ast":null,"code":"import { __decorate } from \"tslib\";\n// src/app/components/classifier/classifier.component.ts\nimport { Component } from '@angular/core';\nimport * as L from 'leaflet';\nlet ClassifierComponent = class ClassifierComponent {\n  constructor(svc) {\n    this.svc = svc;\n    this.tileUrl = null;\n    this.prediction = null;\n    this.loading = false;\n    this.error = null;\n  }\n  ngAfterViewInit() {\n    // 1) Initialize the map\n    this.map = L.map('map', {\n      maxBounds: L.latLngBounds([-90, -180], [90, 180]),\n      maxBoundsViscosity: 1.0\n    }).setView([36.8065, 10.1815], 13);\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap'\n    }).addTo(this.map);\n    // 2) Ensure sizing is correct\n    setTimeout(() => this.map.invalidateSize(), 0);\n    // 3) Handle click\n    this.map.on('click', e => {\n      this.lat = e.latlng.lat;\n      this.lon = e.latlng.lng;\n    });\n  }\n  onSubmit() {\n    this.tileUrl = this.prediction = this.error = null;\n    this.loading = true;\n    this.svc.predict(this.lat, this.lon).subscribe({\n      next: res => {\n        this.prediction = res.prediction;\n        this.tileUrl = `data:image/png;base64,${res.tile}`;\n        this.loading = false;\n      },\n      error: () => {\n        this.error = 'Failed to load tile or prediction';\n        this.loading = false;\n      }\n    });\n  }\n};\nClassifierComponent = __decorate([Component({\n  selector: 'app-classifier',\n  templateUrl: './classifier.component.html',\n  styleUrls: ['./classifier.component.scss']\n})], ClassifierComponent);\nexport { ClassifierComponent };","map":{"version":3,"names":["Component","L","ClassifierComponent","constructor","svc","tileUrl","prediction","loading","error","ngAfterViewInit","map","maxBounds","latLngBounds","maxBoundsViscosity","setView","tileLayer","attribution","addTo","setTimeout","invalidateSize","on","e","lat","latlng","lon","lng","onSubmit","predict","subscribe","next","res","tile","__decorate","selector","templateUrl","styleUrls"],"sources":["C:\\Users\\MSI\\Downloads\\admin-pro-angular-lite-master\\admin-pro-angular-lite-master\\angular-16\\src\\app\\pages\\classifier\\classifier.component.ts"],"sourcesContent":["// src/app/components/classifier/classifier.component.ts\nimport { Component, AfterViewInit } from '@angular/core';\nimport * as L from 'leaflet';\n\n@Component({\n  selector: 'app-classifier',\n  templateUrl: './classifier.component.html',\n  styleUrls: ['./classifier.component.scss']\n})\nexport class ClassifierComponent implements AfterViewInit {\n  private map!: L.Map;\n  lat!: number;\n  lon!: number;\n\n  tileUrl: string | null = null;\n  prediction: string | null = null;\n  loading = false;\n  error: string | null = null;\n\n  constructor(private svc: ClassificationService) {}\n\n  ngAfterViewInit(): void {\n    // 1) Initialize the map\n    this.map = L.map('map', {\n      maxBounds: L.latLngBounds([-90, -180], [90, 180]),\n      maxBoundsViscosity: 1.0,\n    }).setView([36.8065, 10.1815], 13);\n\n    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n      attribution: '© OpenStreetMap'\n    }).addTo(this.map);\n\n    // 2) Ensure sizing is correct\n    setTimeout(() => this.map.invalidateSize(), 0);\n\n    // 3) Handle click\n    this.map.on('click', e => {\n      this.lat = (e as any).latlng.lat;\n      this.lon = (e as any).latlng.lng;\n    });\n  }\n\n  onSubmit(): void {\n    this.tileUrl = this.prediction = this.error = null;\n    this.loading = true;\n\n    this.svc.predict(this.lat, this.lon).subscribe({\n      next: res => {\n        this.prediction = res.prediction;\n        this.tileUrl = `data:image/png;base64,${res.tile}`;\n        this.loading = false;\n      },\n      error: () => {\n        this.error = 'Failed to load tile or prediction';\n        this.loading = false;\n      }\n    });\n  }\n}\n"],"mappings":";AAAA;AACA,SAASA,SAAS,QAAuB,eAAe;AACxD,OAAO,KAAKC,CAAC,MAAM,SAAS;AAO5B,IAAaC,mBAAmB,GAAhC,MAAaA,mBAAmB;EAU9BC,YAAoBC,GAA0B;IAA1B,KAAAA,GAAG,GAAHA,GAAG;IALvB,KAAAC,OAAO,GAAkB,IAAI;IAC7B,KAAAC,UAAU,GAAkB,IAAI;IAChC,KAAAC,OAAO,GAAG,KAAK;IACf,KAAAC,KAAK,GAAkB,IAAI;EAEsB;EAEjDC,eAAeA,CAAA;IACb;IACA,IAAI,CAACC,GAAG,GAAGT,CAAC,CAACS,GAAG,CAAC,KAAK,EAAE;MACtBC,SAAS,EAAEV,CAAC,CAACW,YAAY,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE,GAAG,CAAC,CAAC;MACjDC,kBAAkB,EAAE;KACrB,CAAC,CAACC,OAAO,CAAC,CAAC,OAAO,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC;IAElCb,CAAC,CAACc,SAAS,CAAC,oDAAoD,EAAE;MAChEC,WAAW,EAAE;KACd,CAAC,CAACC,KAAK,CAAC,IAAI,CAACP,GAAG,CAAC;IAElB;IACAQ,UAAU,CAAC,MAAM,IAAI,CAACR,GAAG,CAACS,cAAc,EAAE,EAAE,CAAC,CAAC;IAE9C;IACA,IAAI,CAACT,GAAG,CAACU,EAAE,CAAC,OAAO,EAAEC,CAAC,IAAG;MACvB,IAAI,CAACC,GAAG,GAAID,CAAS,CAACE,MAAM,CAACD,GAAG;MAChC,IAAI,CAACE,GAAG,GAAIH,CAAS,CAACE,MAAM,CAACE,GAAG;IAClC,CAAC,CAAC;EACJ;EAEAC,QAAQA,CAAA;IACN,IAAI,CAACrB,OAAO,GAAG,IAAI,CAACC,UAAU,GAAG,IAAI,CAACE,KAAK,GAAG,IAAI;IAClD,IAAI,CAACD,OAAO,GAAG,IAAI;IAEnB,IAAI,CAACH,GAAG,CAACuB,OAAO,CAAC,IAAI,CAACL,GAAG,EAAE,IAAI,CAACE,GAAG,CAAC,CAACI,SAAS,CAAC;MAC7CC,IAAI,EAAEC,GAAG,IAAG;QACV,IAAI,CAACxB,UAAU,GAAGwB,GAAG,CAACxB,UAAU;QAChC,IAAI,CAACD,OAAO,GAAG,yBAAyByB,GAAG,CAACC,IAAI,EAAE;QAClD,IAAI,CAACxB,OAAO,GAAG,KAAK;MACtB,CAAC;MACDC,KAAK,EAAEA,CAAA,KAAK;QACV,IAAI,CAACA,KAAK,GAAG,mCAAmC;QAChD,IAAI,CAACD,OAAO,GAAG,KAAK;MACtB;KACD,CAAC;EACJ;CACD;AAjDYL,mBAAmB,GAAA8B,UAAA,EAL/BhC,SAAS,CAAC;EACTiC,QAAQ,EAAE,gBAAgB;EAC1BC,WAAW,EAAE,6BAA6B;EAC1CC,SAAS,EAAE,CAAC,6BAA6B;CAC1C,CAAC,C,EACWjC,mBAAmB,CAiD/B;SAjDYA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}